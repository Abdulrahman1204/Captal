import mongoose, { Schema, Model } from "mongoose";
import joi from "joi";
import { IRecourse } from "../dtos";
import { getAddressFromCoords } from "../../../utils/location";

// Recourse Schema
const RecourseSchema = new Schema(
  {
    userId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
      default: null,
    },
    recourseName: {
      type: String,
      required: true,
    },
    recoursePhone: {
      type: String,
      required: true,
    },
    clientName: {
      type: String,
      required: true,
    },
    clientPhone: {
      type: String,
      required: true,
    },
    serialNumber: {
      type: Number,
      required: true,
      unique: true,
    },
    projectName: {
      type: String,
      required: true,
    },
    dateOfproject: {
      type: Date,
      default: Date.now,
    },
    attachedFile: {
      publicId: { type: String, default: null },
      url: { type: String, default: "" },
    },
    billFile: {
      publicId: { type: String, default: null },
      url: { type: String, default: "" },
    },
    materials: [
      {
        type: mongoose.Schema.Types.ObjectId,
        ref: "Matrials",
        default: null,
      },
    ],
    paymentCheck: {
      type: String,
      enum: ["cash", "delayed"],
    },
    advance: {
      type: String,
      required: true,
    },
    uponDelivry: {
      type: String,
      required: true,
    },
    afterDelivry: {
      type: String,
      required: true,
    },
    countryName: {
      type: String,
      required: true,
    },
    location: {
      type: {
        type: String,
        default: "Point",
        enum: ["Point"],
      },
      coordinates: {
        type: [Number],
        default: [0, 0],
      },
    },
    statusOrder: {
      type: String,
      enum: [
        "accepted",
        "an invoice has been issued",
        "shipped",
        "delivered",
        "pending",
        "not accepted",
      ],
      default: "pending",
    },
  },
  {
    timestamps: true,
  }
);

// Recourse Order Model
const RecourseOrder: Model<IRecourse> = mongoose.model<IRecourse>(
  "RecourseOrder",
  RecourseSchema
);

// Create index for geospatial search
RecourseSchema.index({ location: "2dsphere", createdAt: -1 });

// Middleware to automatically calculate address before saving
RecourseSchema.pre<IRecourse>("save", async function (next) {
  if (
    this.isModified("location") &&
    this.location.coordinates[0] !== 0 &&
    this.location.coordinates[1] !== 0
  ) {
    try {
      const [longitude, latitude] = this.location.coordinates;
      const address = await getAddressFromCoords(latitude, longitude);

      if (address) {
        if (address.street) this.street = address.street;
        if (address.country) {
          this.country = address.country;
          this.countryName = address.country;
        }
        if (